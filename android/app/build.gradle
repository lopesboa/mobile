apply plugin: "com.android.application"
apply plugin: "io.fabric"

import com.android.build.OutputFile

project.ext.react = [
    entryFile: "index.js",
    // https://facebook.github.io/react-native/docs/performance#enable-the-ram-format
    bundleCommand: "ram-bundle",
    enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'
/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false)


/**
 * Load configs from config folder for each build type
 */
task loadConfig {
    List<String> buildTypes = new ArrayList<String>();
    buildTypes.add("debug");
    buildTypes.add("release");
    for (String buildType : buildTypes) {
        String configFilename = "config/${buildType}.properties"
        File configFile = rootProject.file(configFilename)
        Properties config = new Properties()
        config.load(new FileInputStream(configFile))
        project.ext.set("${buildType}Config", config)
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId releaseConfig['build.application_id']
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled true
        missingDimensionStrategy 'react-native-camera', 'general'
        versionCode 1
        versionName "2.0.122"

        // For Detox
        // testBuildType System.getProperty('testBuildType', 'debug')
        // testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    dexOptions {
      jumboMode true  // This for string limit
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        // uncomment below if you want to test it with certificate
        /*debug {
            storeFile file("../../${System.env.KEYSTORE_FILE}")
            storePassword "${System.env.KEYSTORE_PASSWORD}"
            keyAlias "${System.env.KEYSTORE_ALIAS}"
            keyPassword "${System.env.KEYSTORE_ALIAS_PASSWORD}"
        }*/
        release {
            storeFile file("../../${System.env.KEYSTORE_FILE}")
            storePassword "${System.env.KEYSTORE_PASSWORD}"
            keyAlias "${System.env.KEYSTORE_ALIAS}"
            keyPassword "${System.env.KEYSTORE_ALIAS_PASSWORD}"
        }
    }
    buildTypes {
        debug {
            setProperty("archivesBaseName", debugConfig['build.output_name'])
            debugConfig.each { key, value ->
                if (key ==~ /^string.*/) {
                    resValue "string", key.replace('string.', ''), value
                }
                if (key ==~ /^color.*/) {
                    resValue "color", key.replace('color.', ''), value
                }
            }
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            setProperty("archivesBaseName", releaseConfig['build.output_name'])
            releaseConfig.each { key, value ->
                if (key ==~ /^string.*/) {
                    resValue "string", key.replace('string.', ''), value
                }
                if (key ==~ /^color.*/) {
                    resValue "color", key.replace('color.', ''), value
                }
            }
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    packagingOptions {
        pickFirst "lib/armeabi-v7a/libc++_shared.so"
        pickFirst "lib/arm64-v8a/libc++_shared.so"
        pickFirst "lib/x86/libc++_shared.so"
        pickFirst "lib/x86_64/libc++_shared.so"
    }
}

dependencies {
    // For 64 Bits support
    implementation "org.webkit:android-jsc:r241213"
    implementation project(':react-native-notifications')

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation 'androidx.multidex:multidex:2.0.0'

    // Monitoring
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.9@aar') {
      transitive = true
    }

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }
    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}

configurations {
    compileClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
}

dependencyLocking {
    lockAllConfigurations()
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle");
applyNativeModulesAppBuildGradle(project)
